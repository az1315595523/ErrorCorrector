{
  "expectedTimes": 6,
  "times": 5,
  "realTimes": 6,
  "single_Info": [
    {
      "mutated_info": "Mutator: ConditionMutator\nMutation Type: LogicOpReverse\nLine: 6\nOriginal Code: (x == m or x == n)\n\nMutated Code: (x == m and x == n)\n\nDescription: LogicOpReverse: (x == m or x == n)\n → (x == m and x == n)\n\n",
      "mutator_type": "ConditionMutator"
    },
    {
      "mutated_info": "Mutator: ConditionMutator\nMutation Type: LogicOpReverse\nLine: 6\nOriginal Code: (x == m and x == n)\n\nMutated Code: (x == m or x == n)\n\nDescription: LogicOpReverse: (x == m and x == n)\n → (x == m or x == n)\n\n",
      "mutator_type": "ConditionMutator"
    },
    {
      "mutated_info": "Mutator: VariableNameMutator\nMutation Type: VReplace\nLine: 7\nOriginal Code: x\nMutated Code: m\nDescription: Renamed 'x' to 'm'\n",
      "mutator_type": "VariableNameMutator"
    },
    {
      "mutated_info": "Mutator: ConditionMutator\nMutation Type: LogicOpReverse\nLine: 6\nOriginal Code: (m == m or m == n)\n\nMutated Code: (m == m and m == n)\n\nDescription: LogicOpReverse: (m == m or m == n)\n → (m == m and m == n)\n\n",
      "mutator_type": "ConditionMutator"
    },
    {
      "mutated_info": "Mutator: VariableNameMutator\nMutation Type: VReplace\nLine: 8\nOriginal Code: list1\nMutated Code: m\nDescription: Renamed 'list1' to 'm'\n",
      "mutator_type": "VariableNameMutator"
    }
  ]
}